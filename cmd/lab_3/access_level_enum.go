// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package main

import (
	"errors"
	"fmt"
)

const (
	// AccessLevelPublicData is a AccessLevel of type Public_data.
	AccessLevelPublicData AccessLevel = iota + 1
	// AccessLevelSecret is a AccessLevel of type Secret.
	AccessLevelSecret
	// AccessLevelTopSecret is a AccessLevel of type Top_secret.
	AccessLevelTopSecret
)

var ErrInvalidAccessLevel = errors.New("not a valid AccessLevel")

const _AccessLevelName = "public_datasecrettop_secret"

var _AccessLevelMap = map[AccessLevel]string{
	AccessLevelPublicData: _AccessLevelName[0:11],
	AccessLevelSecret:     _AccessLevelName[11:17],
	AccessLevelTopSecret:  _AccessLevelName[17:27],
}

// String implements the Stringer interface.
func (x AccessLevel) String() string {
	if str, ok := _AccessLevelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AccessLevel(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AccessLevel) IsValid() bool {
	_, ok := _AccessLevelMap[x]
	return ok
}

var _AccessLevelValue = map[string]AccessLevel{
	_AccessLevelName[0:11]:  AccessLevelPublicData,
	_AccessLevelName[11:17]: AccessLevelSecret,
	_AccessLevelName[17:27]: AccessLevelTopSecret,
}

// ParseAccessLevel attempts to convert a string to a AccessLevel.
func ParseAccessLevel(name string) (AccessLevel, error) {
	if x, ok := _AccessLevelValue[name]; ok {
		return x, nil
	}
	return AccessLevel(0), fmt.Errorf("%s is %w", name, ErrInvalidAccessLevel)
}
